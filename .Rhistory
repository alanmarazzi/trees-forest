geom_density()
univ %>% group_by(cpvPlus) %>%
ggplot(aes(margin, fill = factor(cpvPlus))) +
geom_density()
summary(univ)
univ %>% group_by(sim) %>% summarize(media = mean(margin)) %>% mean(.)
univ %>% group_by(sim) %>% summarize(media = mean(margin)) %>% mean(media)
means <- univ %>% group_by(sim) %>% summarize(media = mean(margin))
mean(means$media)
source('~/repo/analytics/universal/R/sims.R', echo=TRUE)
source('~/repo/analytics/universal/R/sims.R', echo=TRUE)
sums <- univ %>% group_by(sim) %>% summarize(somma = sum(margin))
mean(sums$somma)
sum(c(1, -3))
median(means$media)
median(sums$somma)
mean(means$media)
mean(sums$somma)
library(future)
plan(multicore)
library(sonaR)
tw_user <- "sorgenia"
tw_token <- tw_oauth(key = "codice key",
secret = "codice secret")
tw_token <- tw_oauth(key = "5VP9EcnDzwT2XzvMI0aQn3DYt",
secret = "JPbcnKOLO34JoXGAqdWtZPPRo0nRRD1fQnDGTbeM6clBCdSJWS")
get_tweets_async <-
function(tw_user, token, calls = 16) {
if (calls < 1 | calls > 16) {
stop("L'argomento 'calls' deve essere compreso fra 1 e 16")
} else {
req <- paste0(
"https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=",
tw_user,
"&count=1"
)
id <- future({content(
httr::GET(
req,
config(token = token)
)
)[[1]]$id - 1})
tweets <- list()
tw <- list()
pb <- progress::progress_bar$new(total = calls)
for (tweet in seq(1, calls)) {
pb$tick()
tw <-
future({httr::GET(
paste0(
"https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=",
tw_user,
"&count=200&include_rts=false&exclude_replies=true&max_id=",
value(id)
),
config(token = token)
)})
tw <- httr::content(value(tw))
tweets <- c(tweets, tw)
id <- tw[[length(tw)]]$id - 1
}
return(tweets)
}
}
async <- get_tweets_async(tw_user, tw_token)
async <- get_tweets_async(tw_user, tw_token)
id <- future({content(
httr::GET(
req,
config(token = token)
)
)[[1]]$id - 1})
value(id)
get_tweets_async <-
function(tw_user, token, calls = 16) {
if (calls < 1 | calls > 16) {
stop("L'argomento 'calls' deve essere compreso fra 1 e 16")
} else {
req <- paste0(
"https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=",
tw_user,
"&count=1"
)
id <- future({httr::content(
httr::GET(
req,
config(token = token)
)
)[[1]]$id - 1})
tweets <- list()
tw <- list()
pb <- progress::progress_bar$new(total = calls)
for (tweet in seq(1, calls)) {
pb$tick()
tw <-
future({httr::GET(
paste0(
"https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=",
tw_user,
"&count=200&include_rts=false&exclude_replies=true&max_id=",
value(id)
),
config(token = token)
)})
tw <- httr::content(value(tw))
tweets <- c(tweets, tw)
id <- tw[[length(tw)]]$id - 1
}
return(tweets)
}
}
async <- get_tweets_async(tw_user, tw_token)
get_tweets_async <-
function(tw_user, token, calls = 16) {
if (calls < 1 | calls > 16) {
stop("L'argomento 'calls' deve essere compreso fra 1 e 16")
} else {
req <- paste0(
"https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=",
tw_user,
"&count=1"
)
id <- future({httr::content(
httr::GET(
req,
httr::config(token = token)
)
)[[1]]$id - 1})
tweets <- list()
tw <- list()
pb <- progress::progress_bar$new(total = calls)
for (tweet in seq(1, calls)) {
pb$tick()
tw <-
future({httr::GET(
paste0(
"https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=",
tw_user,
"&count=200&include_rts=false&exclude_replies=true&max_id=",
value(id)
),
config(token = token)
)})
tw <- httr::content(value(tw))
tweets <- c(tweets, tw)
id <- tw[[length(tw)]]$id - 1
}
return(tweets)
}
}
async <- get_tweets_async(tw_user, tw_token)
library(httr)
get_tweets_async <-
function(tw_user, token, calls = 16) {
if (calls < 1 | calls > 16) {
stop("L'argomento 'calls' deve essere compreso fra 1 e 16")
} else {
req <- paste0(
"https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=",
tw_user,
"&count=1"
)
id <- future({httr::content(
httr::GET(
req,
httr::config(token = token)
)
)[[1]]$id - 1})
tweets <- list()
tw <- list()
pb <- progress::progress_bar$new(total = calls)
for (tweet in seq(1, calls)) {
pb$tick()
tw <-
future({httr::GET(
paste0(
"https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=",
tw_user,
"&count=200&include_rts=false&exclude_replies=true&max_id=",
value(id)
),
httr::config(token = token)
)})
tw <- httr::content(value(tw))
tweets <- c(tweets, tw)
id <- tw[[length(tw)]]$id - 1
}
return(tweets)
}
}
async <- get_tweets_async(tw_user, tw_token)
value(id)
id <- future({httr::content(
httr::GET(
req,
httr::config(token = token)
)
)[[1]]$id - 1})
value(id)
req <- paste0(
"https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=",
tw_user,
"&count=1"
)
id <- future({httr::content(
httr::GET(
req,
httr::config(token = token)
)
)[[1]]$id - 1})
value(id)
f <- function(a) function(b) a + b
f(2)(2)
ff <- vector("list", 4)
for (i in 1:4) {
ff[[i]] <- f(i)
}
ff
library(jsonlite)
metadata <- fromJSON("https://data.nasa.gov/data.json")
names(metadata$dataset)
sapply(metadata$dataset, class)
class(metadata$dataset$title)
library(dplyr)
nasa_title <- data.frame(id = metadata$dataset$`_id`$`$oid`,
title = metadata$dataset$title)
nasa_title
nasa_title <- data_frame(id = metadata$dataset$`_id`$`$oid`,
title = metadata$dataset$title)
nasa_title
nasa_desc <- data_frame(id = metadata$dataset$`_id`$`$oid`,
desc = metadata$dataset$description)
library(tidyr)
nasa_keyword <- data_frame(id = metadata$dataset$`_id`$`$oid`,
keyword = metadata$dataset$keyword) %>%
unnest(keyword)
library(tidytext)
nasa_title <- nasa_title %>%
unnest_tokens(word, title) %>%
anti_join(stop_words)
nasa_desc <- nasa_desc %>%
unnest_tokens(word, desc) %>%
anti_join(stop_words)
nasa_title %>%
count(word, sort = TRUE)
my_stopwords <- data.frame(word = c(as.character(1:10), "v1", "v03",
"l2", "l3", "v5.2.0",
"v003", "v004", "v005", "v006"))
nasa_title <- nasa_title %>%
anti_join(my_stopwords)
nasa_desc <- nasa_desc %>%
anti_join(my_stopwords)
nasa_keyword %>%
group_by(keyword) %>%
count(sort = TRUE)
nasa_keyword <- nasa_keyword %>%
mutate(keyword = toupper(keyword))
install.packages("widyr")
stops <- data.frame(word = c(tm::stopwords(lang), seq(0:2020)))
stops <- data.frame(word = c(tm::stopwords("it"), seq(0:2020)))
head(stops)
tail(stops)
class(stops)
class(stops$word)
?devtools::install_local
library(sonaR)
library(dplyr)
library(tidytext)
tw_user <- "sorgenia"
tw_token <- tw_oauth(key = "codice key",
secret = "codice secret")
library(Rfacebook)
fb_user <- "fitnestapp"
load("fb_oauth")
fb <- getPage(fb_user, fb_oauth, since = fb_date, n = 100)
fb_date <- "2016-01-01"
fb <- getPage(fb_user, fb_oauth, since = fb_date, n = 100)
fb$created_time <- as.Date(fb$created_time)
fb$message <- clean_text(fb$message)
fb_corpus <- fb %>% unnest_tokens(word, message)
fb_corpus <- rm_stops(fb_corpus, lang = "it")
count_type <-
function(corpus, start_date, end_date) {
counts <- corpus %>%
count(type, sort = TRUE)
}
count_type(fb_corpus)
count_type <-
function(corpus, start_date, end_date) {
counts <- corpus %>%
count(type, sort = TRUE); return(counts)
}
count_type(fb_corpus)
names(fb)
trees_packages <- c(
"FFTrees",
"party",
"randomForest",
"intubate",
"dplyr",
"modelr"
)
titanic <- read.csv(
"https://raw.githubusercontent.com/alanmarazzi/trees-forest/master/data/train.csv",
stringsAsFactors = FALSE,
na.strings = "")
names(titanic) <- tolower(names(titanic))
titanic$sex <- as.factor(titanic$sex)
titanic$embarked <- as.factor(titanic$embarked)
mean(is.na(titanic$age))
age_prediction <- lm(age ~ survived + pclass + fare, data = titanic)
summary(age_prediction)
titanic$age[is.na(titanic$age)] <- predict(age_prediction,
newdata = titanic[is.na(titanic$age),])
sum(is.na(titanic$age))
library(dplyr)
library(intubate)
logi <- titanic %>%
select(survived, pclass, sex, age, sibsp) %>%
ntbt_glm(survived ~ ., family = binomial)
summary(logi)
logi_pred <- predict(logi, type = "response")
survivors_logi <- rep(0, nrow(titanic))
survivors_logi[logi_pred > .5] <- 1
table(model = survivors_logi, real = titanic$survived)
(480 + 250)/nrow(titanic)
test <- read.csv("https://raw.githubusercontent.com/alanmarazzi/trees-forest/master/data/test.csv",
stringsAsFactors = FALSE,
na.strings = "")
names(test) <- tolower(names(test))
test$sex <- as.factor(test$sex)
test_logi_pred <- predict(logi, test, type = "response")
surv_test_logi <- data.frame(PassengerId = test$passengerid,
Survived = rep(0, nrow(test)))
surv_test_logi$Survived[test_logi_pred > .5] <- 1
table(surv_test_logi$Survived)
library(party)
partyTitanic <- titanic %>%
select(age, pclass, sex, sibsp, fare, survived) %>%
ntbt(ctree, as.factor(survived) ~ .)
plot(partyTitanic)
train_party <- Predict(partyTitanic)
table(tree = train_party, real = titanic$survived)
party_pred <- Predict(partyTitanic, newdata = test)
party_pred <- as.numeric(party_pred) - 1
party_pred <- data.frame(PassengerId = test$passengerid, Survived = party_pred)
library(randomForest)
set.seed(123)
titanic_bag <- titanic %>%
select(survived, age, pclass, sex, sibsp, fare, parch) %>%
ntbt_randomForest(as.factor(survived) ~ ., mtry = 6)
test$age[is.na(test$age)] <- median(test$age, na.rm = TRUE)
bag_pred <- predict(titanic_bag, test)
sum(is.na(bag_pred))
bag_pred[is.na(bag_pred)] <- 1
bag_pred <- data.frame(PassengerId = test$passengerid, Survived = bag_pred, row.names = 1:length(bag_pred))
set.seed(456)
titanic_rf <- titanic %>%
select(survived, age, pclass, sex, sibsp, fare, parch) %>%
ntbt_randomForest(as.factor(survived) ~ ., mtry = 3, n.trees = 5000)
rf_pred <- predict(titanic_rf, test)
rf_pred[is.na(rf_pred)] <- 1
rf_pred <- data.frame(PassengerId = test$passengerid, Survived = rf_pred, row.names = 1:length(rf_pred))
library(gbm)
install.packages("gbm")
install.packages("gbm")
library(gbm)
set.seed(999)
set.seed(999)
titanic_boost <- titanic %>%
select(survived, age, pclass, sex, sibsp, fare, parch) %>%
ntbt(gbm, as.factor(survived) ~ .,
distribution = "bernoulli",
n.trees = 5000,
interaction.depth = 3)
library(dplyr)
library(intubate)
set.seed(999)
titanic_boost <- titanic %>%
select(survived, age, pclass, sex, sibsp, fare, parch) %>%
ntbt(gbm, as.factor(survived) ~ .,
distribution = "bernoulli",
n.trees = 5000,
interaction.depth = 3)
summary(titanic_boost)
set.seed(999)
titanic_boost <- titanic %>%
select(survived, age, pclass, sex, sibsp, fare, parch) %>%
ntbt(gbm, survived ~ .,
distribution = "bernoulli",
n.trees = 5000,
interaction.depth = 3)
summary(titanic_boost)
plot(titanic_boost, i = "sex")
boost_pred <- predict(titanic_boost, test, n.trees = 5000)
boost_pred <- predict(titanic_boost, n.trees = 5000)
table(boost_pred, titanic$survived)
boost_pred <- predict(titanic_boost, n.trees = 5000, type = "response")
table(boost_pred, titanic$survived)
names(boost_pred)
head(boost_pred)
train_boost <- 0
train_boost[boost_pred >= .5] <- 1
table(boost_pred, titanic$survived)
table(train_boost, titanic$survived)
boost_pred <- predict(titanic_boost, titanic, n.trees = 5000, type = "response")
train_boost <- 0
train_boost[boost_pred >= .5] <- 1
table(train_boost, titanic$survived)
nrow(titanic)
titanic_boost$train.error
titanic_boost$oobag.improve
set.seed(999)
titanic_boost <- titanic %>%
select(survived, age, pclass, sex, sibsp, fare, parch) %>%
ntbt(gbm, survived ~ .,
distribution = "bernoulli",
n.trees = 5000,
interaction.depth = 3)
boost_pred <- predict(titanic_boost, test, n.trees = 5000, type = "response")
test_boost <- 0
test_boost[boost_pred >= .5] <- 1
test_boost <- data.frame(PassengerId = test$passengerid,
Survived = test_boost)
nrow(test)
nrow(test_boost)
sum(is.na(test_boost$Survived))
?gbm
set.seed(999)
titanic_boost <- titanic %>%
select(survived, age, pclass, sex, sibsp, fare, parch) %>%
ntbt(gbm, survived ~ .,
distribution = "bernoulli",
n.trees = 5000,
interaction.depth = 2)
boost_pred <- predict(titanic_boost, test, n.trees = 5000, type = "response")
test_boost <- 0
test_boost[boost_pred >= .5] <- 1
test_boost <- data.frame(PassengerId = test$passengerid,
Survived = test_boost)
sum(is.na(test_boost$Survived))
set.seed(999)
titanic_boost <- titanic %>%
select(survived, age, pclass, sex, sibsp, fare, parch) %>%
ntbt(gbm, survived ~ .,
distribution = "bernoulli",
n.trees = 5000,
interaction.depth = 4)
boost_pred <- predict(titanic_boost, test, n.trees = 5000, type = "response")
test_boost <- 0
test_boost[boost_pred >= .5] <- 1
test_boost <- data.frame(PassengerId = test$passengerid,
Survived = test_boost)
sum(is.na(test_boost$Survived))
test$age[is.na(test$age)] <- median(test$age, na.rm = TRUE)
boost_pred <- predict(titanic_boost, test, n.trees = 5000, type = "response")
test_boost <- 0
test_boost[boost_pred >= .5] <- 1
test_boost <- data.frame(PassengerId = test$passengerid,
Survived = test_boost)
sum(is.na(test_boost$Survived))
length(boost_pred)
test_boost <- rep(0, nrow(test))
test_boost[boost_pred >= .5] <- 1
test_boost <- data.frame(PassengerId = test$passengerid,
Survived = test_boost)
sum(is.na(test_boost$Survived))
set.seed(999)
titanic_boost <- titanic %>%
select(survived, age, pclass, sex, sibsp, fare, parch) %>%
ntbt(gbm, survived ~ .,
distribution = "bernoulli",
n.trees = 5000,
interaction.depth = 3)
boost_pred <- predict(titanic_boost, test, n.trees = 5000, type = "response")
test_boost <- rep(0, nrow(test))
test_boost[boost_pred >= .5] <- 1
test_boost <- data.frame(PassengerId = test$passengerid,
Survived = test_boost)
getwd()
setwd("/documents/personal/trees-forest")
setwd("documents/personal/trees-forest")
getwd()
write.csv(test_boost, "results/test_boost.csv", row.names = FALSE)
set.seed(999)
titanic_boost <- titanic %>%
select(survived, age, pclass, sex, sibsp, fare, parch) %>%
ntbt(gbm, survived ~ .,
distribution = "bernoulli",
n.trees = 5000,
interaction.depth = 3,
shrinkage = .01)
boost_pred <- predict(titanic_boost, test, n.trees = 5000, type = "response")
test_boost <- rep(0, nrow(test))
test_boost[boost_pred >= .5] <- 1
test_boost <- data.frame(PassengerId = test$passengerid,
Survived = test_boost)
write.csv(test_boost, "results/test_boost.csv", row.names = FALSE)
set.seed(999)
titanic_boost <- titanic %>%
select(survived, age, pclass, sex, sibsp, fare, parch) %>%
ntbt(gbm, survived ~ .,
distribution = "bernoulli",
n.trees = 10000,
interaction.depth = 3,
shrinkage = .00001)
boost_pred <- predict(titanic_boost, test, n.trees = 5000, type = "response")
test_boost <- rep(0, nrow(test))
test_boost[boost_pred >= .5] <- 1
test_boost <- data.frame(PassengerId = test$passengerid,
Survived = test_boost)
write.csv(test_boost, "results/test_boost.csv", row.names = FALSE)
