gtd$country_txt[gtd$country_txt == "East Germany (GDR)"] <- "Germany"
gtd$country_txt[gtd$country_txt == "West Germany (FRG)"] <- "Germany"
gtd$country_txt[gtd$country_txt == "Slovak Republic"] <- "Slovakia"
gtd$country_txt[gtd$country_txt == "Czechoslovakia"] <- "Czech Republic" # Most of the kills in only one attack in Czech Republic
gtd$country_txt[gtd$country_txt == "Soviet Union"] <- "Russia" # For simplicity, just 96 victims
world <- map_data("world")
worldKill <- gtd %>% group_by(country_txt) %>% summarize(kill = sum(nkill, na.rm = TRUE))
mongolia <- c("Mongolia", 0)
worldKill <- rbind(worldKill, mongolia)
worldKill$kill <- as.numeric(worldKill$kill)
ggplot(worldKill, aes(map_id = country_txt))+
geom_map(aes(fill = kill), map = world, color = "white", size = .2)+
expand_limits(x = world$long, y = world$lat)+
scale_fill_viridis(limits = c(0,20000), "Number of people killed by terrorist attacks", end = .8, begin = .15)+
theme_map()+
theme(
axis.text = element_blank(),
legend.position = "bottom",
axis.title = element_blank(),
axis.ticks = element_blank()
)+
guides(fill = guide_colorbar(barwidth = 20, barheight = .5, title.position = "top"))
WORLDkILL
worldKill
worldKill$chart <- worldKill$kill[worldKill$kill > 20000] <- 20000
worldKill
worldKill$chart[worldKill$kill > 20000] <- 20000
worldKill
worldKill$chart <- worldKill$kill
worldKill$chart[worldKill$kill > 20000] <- 20000
worldKill
ggplot(worldKill, aes(map_id = country_txt))+
geom_map(aes(fill = kill), map = world, color = "white", size = .2)+
expand_limits(x = world$long, y = world$lat)+
scale_fill_viridis(limits = c(0,20000), "Number of people killed by terrorist attacks", end = .8, begin = .15)+
theme_map()+
theme(
axis.text = element_blank(),
legend.position = "bottom",
axis.title = element_blank(),
axis.ticks = element_blank()
)+
guides(fill = guide_colorbar(barwidth = 20, barheight = .5, title.position = "top"))
worldKill <- gtd %>% group_by(country_txt) %>% summarize(kill = sum(nkill, na.rm = TRUE))
worldKill[worldKill$country_txt == "Mongolia"]
worldKill[worldKill$country_txt == "Mongolia",]
data.frame(worldKill)
x <- 1:1000
mean(x)
?sample
x <- 0:1000
mean(x)
random <- sample(x, 1000, replace = TRUE)
mean(random)
campione <- sample(random, 100)
mean(campione)
campione <- sample(random, 100)
mean(campione)
temp <- c()
medie <- c()
for (i in 1:1000){
medie[i] <- mean(sample(campione, 100, replace = TRUE))
}
medie
mean(medie)
for (i in 1:10000){
medie[i] <- mean(sample(campione, 100, replace = TRUE))
}
mean(medie)
library(boot)
boot(campione, function(x, y) mean(x, y))
boot(campione, function(x, y) mean(x, y), R = 1000)
boot(campione, function(x, y) mean(x, 1), R = 1000)
?boot
boot(campione, function(x) mean(x), R = 1000)
boot(campione, function(x, y = 0) mean(x), R = 1000)
boot(campione, function(x, y = 0) mean(x), R = 10)
hist(campione)
x <- rnorm(1000, 10, 3)
hist(x)
mean(x)
random <- sample(x, 1000, replace = TRUE)
mean(random)
random <- sample(x, 1000, replace = TRUE)
mean(random)
random <- sample(x, 1000, replace = TRUE)
mean(random)
campione <- sample(random, 100)
mean(campione)
medie <- c()
for (i in 1:10000){
medie[i] <- mean(sample(campione, 100, replace = TRUE))
}
medie <- c()
for (i in 1:10000){
medie[i] <- mean(sample(campione, 10, replace = TRUE))
}
hist(medie)
mean(medie)
head(medie)
boot(campione, function(x, y = 0) mean(x), R = 1000)
boot(campione, function(x, y = 5) mean(x), R = 1000)
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
for (i in 1:10000){
medie[i] <- mean(sample(campione, 10, replace = TRUE))
}
mean(medie)
for (i in 1:10000){
medie[i] <- mean(sample(campione, 100, replace = TRUE))
}
mean(medie)
for (i in 1:1000000){
medie[i] <- mean(sample(campione, 100, replace = TRUE))
}
for (i in 1:100000){
medie[i] <- mean(sample(campione, 100, replace = TRUE))
}
hist(medie)
for (i in 1:100000){
medie[i] <- mean(sample(campione, 100, replace = FALSE))
}
hist(medie)
install.packages("twitteR")
library(twitteR)
tw_oauth <- setup_twitter_oauth("5VP9EcnDzwT2XzvMI0aQn3DYt", "JPbcnKOLO34JoXGAqdWtZPPRo0nRRD1fQnDGTbeM6clBCdSJWS", "425794970-EhthiGkZ7CUmI5kKuX0eZ40vZyQ48lou6Pdj5tc8", "F1eeFykfVfXX8A2QPbIELSZGE3YNmcHaBbpms0QmIbRne")
save("tw_oauth")
save(tw_oauth, "tw_oauth")
save("tw_oauth", tw_oauth)
?save
save(file = "tw_oauth", tw_oauth)
?twitteR
tweets <- searchTwitteR("#rstats+#rlang+rstats+rlang", n = 3200)
head(tweets)
tweets <- searchTwitteR("#rstats", n = 3200)
tweets <- twListToDF(tweets)
View(tweets)
tweets <- subset(tweets, isRetweet == FALSE)
?sort
library(dplyr)
tweets <- arrange(tweets, desc(retweetCount))
headtweets
head(tweets)
tweets <- searchTwitteR("#rstats", n = 3200, includeRts = FALSE)
tweets[20,]
tweets[1:20,]
plot(tweets$created, tweets$retweetCount)
tweets_grouped <- tweets %>% group_by(screenName) %>% summarize(count = n, RT_sum = sum(retweetCount))
tweets_grouped <- tweets %>% group_by(screenName) %>% summarize(count = n(), RT_sum = sum(retweetCount))
library(ggplot2)
ggplot(tweets_grouped, aes(count, RT_sum))+
geom_point()
ggplot(tweets_grouped[-1,], aes(count, RT_sum))+
geom_point()
ggplot(tweets_grouped[tweets_grouped$RT_sum < 1000,], aes(count, RT_sum))+
geom_point()
x <- runif(1000000)
y <- runif(1000000)
system.time(x+y)
system.time(x+y)
system.time(x+y)
system.time(x+y)
system.time(x+y)
system.time(x+y)
system.time(x+y)
pairs(mtcars)
install.packages("pryr")
install.packages("pryr", repos = "http://cran.mirror.garr.it/mirrors/CRAN/")
install.packages("pryr", repos = "https://cran.cnr.Berkeley.edu/")
library(pryr)
views <- seq(100000, 2e7, 5e4)
cpv_finder <- function(views, scaglioni, cpv_values) {
for (i in 1:length(scaglioni)) {
temp <- views[views < scaglioni[i]]
cpv_unit <- (cpv_values[i] - cpv_values[i+1])/length(temp)
for (n in 1:length(temp)) {
if (n == 1) {
cpv_final[i] <- cpv_values[i]
} else {
cpv_final[i] <- cpv_values[i-1] - cpv_unit
}
return(cpv_final)
}
}
}
cpv_finder(views, c(1e5, 2e5, 4e5), c(0.3, 0.2, 0.1))
cpv_finder <- function(views, scaglioni, cpv_values) {
for (i in 1:length(scaglioni)) {
temp <- views[views < scaglioni[i]]
cpv_unit <- (cpv_values[i] - cpv_values[i+1])/length(temp)
for (n in 1:length(temp)) {
cpv_final <- vector("numerical", length(temp))
if (n == 1) {
cpv_final[n] <- cpv_values[n]
} else {
cpv_final[n] <- cpv_values[n-1] - cpv_unit
}
return(cpv_final)
}
}
}
cpv_finder(views, c(1e5, 2e5, 4e5), c(0.3, 0.2, 0.1))
cpv_finder <- function(views, scaglioni, cpv_values) {
for (i in 1:length(scaglioni)) {
temp <- views[views < scaglioni[i]]
cpv_unit <- (cpv_values[i] - cpv_values[i+1])/length(temp)
for (n in 1:length(temp)) {
cpv_final <- vector("numeric", length(temp))
if (n == 1) {
cpv_final[n] <- cpv_values[n]
} else {
cpv_final[n] <- cpv_values[n-1] - cpv_unit
}
return(cpv_final)
}
}
}
cpv_finder(views, c(1e5, 2e5, 4e5), c(0.3, 0.2, 0.1))
cpv_finder <- function(views, scaglioni, cpv_values) {
for (i in 1:length(scaglioni)) {
temp <- views[views < scaglioni[i]]
cpv_unit <- (cpv_values[i] - cpv_values[i+1])/length(temp)
for (n in 1:length(temp)) {
cpv_final <- vector("numeric", length(temp))
if (n == 1) {
cpv_final[n] <- cpv_values[n]
} else {
cpv_final[n] <- cpv_values[n-1] - cpv_unit
}
}
}
return(cpv_final)
}
cpv_finder(views, c(1e5, 2e5, 4e5), c(0.3, 0.2, 0.1))
cut(views, length(scaglioni))
?cut
cut(views, c(1e5, 2e5, 4e5), labels = FALSE)
cut(views, c(1e5, 2e5, 4e5), labels = FALSE, include.lowest = TRUE, dig.lab = 3)
cpv <- c(.3, .28, .27, .26, .25, .24, .23, .22, .21, .2)
cpv <- c(.3, .28, .27, .26, .25, .24, .23, .22, .2)
scaglioni <- c(1e5, 2e5, 5e5, 1e6, 2e6, 3e6, 5e6, 10e6, 20e6)
views <- seq(100000, 2e7, 1)
cut(views, scaglioni, labels = FALSE)
test <- cut(views, scaglioni, labels = FALSE, include.lowest = T)
sum(is.na(test))
cpv_final <- vector("numeric", length(views))
rm(test)
if(1 < scaglioni)
TRUE
cpv_final[1:length(views[views < scaglioni[2]])] <- (cpv[1]-cpv[2])/length(views[views < scaglioni[2]])
head(cpv_final)
cpv_final[1] <- cpv[1]
head(cpv_final)
scaglioni[10]
for (i in 1:length()) {
cpv_final[1] <- cpv[1]
cpv_final[2:length(views[views < scaglioni[i+1]])] <- (cpv[i]-cpv[i+1])/length(views[views < scaglioni[i+1]])
}
for (i in 1:length(views)) {
cpv_final[1] <- cpv[1]
cpv_final[i] <- (cpv[i]-cpv[i+1])/length(views[views < scaglioni[i+1]])
}
views <- seq(100000, 2e7, 50000)
rm(cpv_final)
cpv_final <- c()
for (i in 1:length(views)) {
cpv_final[1] <- cpv[1]
cpv_final[i] <- (cpv[i]-cpv[i+1])/length(views[views < scaglioni[i+1]])
}
for (i in 1:length(views)) {
cpv_final[1] <- cpv[1]
cpv_final[i] <- cpv_final[i-1]-(cpv[i]-cpv[i+1])/length(views[views < scaglioni[i+1]])
}
for (i in 2:length(views)) {
cpv_final[1] <- cpv[1]
cpv_final[i] <- cpv_final[i-1]-(cpv[i]-cpv[i+1])/length(views[views < scaglioni[i+1]])
}
cpv_final
cpv_final[1] <- cpv[1]
for (i in 2:length(views)) {
for (n in 1:length(scaglioni)) {
cpv_final[i] <- cpv_final[i-1]-(cpv[n]-cpv[n+1])/length(views[views < scaglioni[n+1]])
}
}
views <- seq(100000, 2e7, 10000)
views <- seq(100000, 2e7, 1000)
cpv <- c(.3, .28, .27, .26, .25, .24, .23, .22, .2)
scaglioni <- c(1e5, 2e5, 5e5, 1e6, 2e6, 3e6, 5e6, 10e6, 20e6)
cpv_final_1 <- seq(.3, .2, length(scaglioni[2]-scaglioni[1]))
scaglioni[2]-scaglioni[1]
cpv_final_1 <- rev(seq(.2, .3 length(scaglioni[2]-scaglioni[1])))
cpv_final_1 <- rev(seq(.2, .3, length(scaglioni[2]-scaglioni[1])))
cpv_final_1 <- rev(seq(.2, .3, (cpv[1]-cpv[2])/length(scaglioni[2]-scaglioni[1])))
cpv_final_1 <- seq(.2, .3, (cpv[1]-cpv[2])/length(scaglioni[2]-scaglioni[1]))
cpv_final_1 <- seq(.3,.2 (cpv[1]-cpv[2])/length(scaglioni[2]-scaglioni[1]))
cpv_final_1 <- seq(.3,.2, (cpv[1]-cpv[2])/length(scaglioni[2]-scaglioni[1]))
for (i in 2:length(scaglioni)) {
temp <-  rev(seq(.2, .3, (cpv[i-1]-cpv[i])/length(scaglioni[i]-scaglioni[i-1])))
print(temp)
}
for (i in 2:length(scaglioni)) {
temp <-  rev(seq(scaglioni[i], scaglioni[i-1], (cpv[i-1]-cpv[i])/length(scaglioni[i]-scaglioni[i-1])))
print(temp)
}
for (i in 2:length(scaglioni)) {
temp <-  rev(seq(cpv[i], cpv[i-1], (cpv[i-1]-cpv[i])/length(scaglioni[i]-scaglioni[i-1])))
print(temp)
}
cpv[1]-cpv[2])/length(scaglioni[2]-scaglioni[1])
(cpv[1]-cpv[2])/length(scaglioni[2]-scaglioni[1])
views <- seq(1e5, 2e5, 1000)
length(views)/(cpv[1]-cpv[2])
(cpv[1]-cpv[2])/length(views)
make_views <- function(scaglioni, by) {
df <- data.frame()
for (i in 1:length(scaglioni)-1) {
views <- c(views, seq(scaglioni[i], scaglioni[i+1], by))
}
}
views <- make_views(scaglioni, 1000)
scaglioni[i]
scaglioni[1]
seq(scaglioni[1], scaglioni[1+1], 100000)
seq(scaglioni[1], scaglioni[1+1], 10000)
scaglioni <- c(1e5, 2e5, 5e5, 1e6, 2e6, 3e6, 5e6, 10e6, 20e6)
views <- make_views(scaglioni, 1000)
make_views <- function(scaglioni, by) {
for (i in 1:(length(scaglioni)-1)) {
views <- c(views, seq(scaglioni[i], scaglioni[i+1], by))
}
return(views)
}
views <- make_views(scaglioni, 1000)
tail(views)
scaglioni[2]-scaglioni[1]
(cpv[2]-cpv[1])/scaglioni[2]-scaglioni[1]
make_cpv <- function(cpv) {
for (i in 1:length(cpv)-1) {
cpv <- c(cpv,
rev(
seq(
cpv[i+1],
cpv[i],
(cpv[i+1]-cpv[i])/scaglioni[i+1]-scaglioni[i]
)
)
)
}
return(cpv)
}
cpv_final <- make_cpv(cpv)
make_cpv <- function(cpv) {
for (i in 1:(length(cpv)-1)) {
cpv <- c(cpv,
rev(
seq(
cpv[i+1],
cpv[i],
(cpv[i+1]-cpv[i])/scaglioni[i+1]-scaglioni[i]
)
)
)
}
return(cpv)
}
cpv_final <- make_cpv(cpv)
make_cpv <- function(cpv) {
for (i in 1:(length(cpv)-1)) {
cpv <- c(cpv,
rev(
seq(
cpv[i],
cpv[i+1],
(cpv[i+1]-cpv[i])/scaglioni[i+1]-scaglioni[i]
)
)
)
}
return(cpv)
}
cpv_final <- make_cpv(cpv)
titanic <- read.csv("data/train.csv", stringsAsFactors = FALSE, na.strings = "")
getwd()
setwd("D:/alanm/Archivio R/rDisorder/trees&forest")
titanic <- read.csv("data/train.csv", stringsAsFactors = FALSE, na.strings = "")
summary(titanic)
summary(lm(Age ~ Survived + Pclass + Sex + Fare, data = titanic))
predict(lm(Age ~ Survived + Pclass + Sex + Fare, data = titanic), newdata = titanic[is.na(titanic$Age),])
predict(lm(Age ~ Survived + Pclass + Fare, data = titanic), newdata = titanic[is.na(titanic$Age),])
names(titanic) <- tolower(names(titanic))
titanic$sex <- as.factor(titanic$sex)
titanic$embarked[titanic$embarked == ""] <- NA
titanic$embarked <- as.factor(titanic$embarked)
age_prediction <- lm(age ~ survived + pclass + fare, data = titanic)
summary(age_prediction)
titanic$age[is.na(titanic$age),] <- predict(
age_prediction,
newdata = titanic[is.na(titanic$age),]
)
pred <- predict(
age_prediction,
newdata = titanic[is.na(titanic$age),]
)
head(pred)
class(pred)
titanic$age[is.na(titanic$age),] <- pred
titanic$age[is.na(titanic$age),] <- unname(pred)
titanic$age[is.na(titanic$age)] <- predict(
age_prediction,
newdata = titanic[is.na(titanic$age),]
)
sum(is.na(titanic$age))
library(dplyr)
titanic_mod <- titanic %>%
select(survived, pclass, sex, age, sibsp, parch, fare)
logi <- glm(survived ~ . - fare - parch, data = titanic_mod, family = binomial)
summary(logi)
logi_pred <- predict(logi, type = "response")
survivors_logi <- rep(0, nrow(titanic))
survivors_logi[logi_pred > .5] <- 1
table(model = survivors_logi, real = titanic$survived)
69+92/nrow(titanic)
nrow(titanic)/480+250
nrow(titanic)/(480+250)
margins(table(model = survivors_logi, real = titanic$survived))
margin.table(model = survivors_logi, real = titanic$survived)
table(model = survivors_logi, real = titanic$survived)
