mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
mean(sample(campione, 10, replace = TRUE))
for (i in 1:10000){
medie[i] <- mean(sample(campione, 10, replace = TRUE))
}
mean(medie)
for (i in 1:10000){
medie[i] <- mean(sample(campione, 100, replace = TRUE))
}
mean(medie)
for (i in 1:1000000){
medie[i] <- mean(sample(campione, 100, replace = TRUE))
}
for (i in 1:100000){
medie[i] <- mean(sample(campione, 100, replace = TRUE))
}
hist(medie)
for (i in 1:100000){
medie[i] <- mean(sample(campione, 100, replace = FALSE))
}
hist(medie)
install.packages("twitteR")
library(twitteR)
tw_oauth <- setup_twitter_oauth("5VP9EcnDzwT2XzvMI0aQn3DYt", "JPbcnKOLO34JoXGAqdWtZPPRo0nRRD1fQnDGTbeM6clBCdSJWS", "425794970-EhthiGkZ7CUmI5kKuX0eZ40vZyQ48lou6Pdj5tc8", "F1eeFykfVfXX8A2QPbIELSZGE3YNmcHaBbpms0QmIbRne")
save("tw_oauth")
save(tw_oauth, "tw_oauth")
save("tw_oauth", tw_oauth)
?save
save(file = "tw_oauth", tw_oauth)
?twitteR
tweets <- searchTwitteR("#rstats+#rlang+rstats+rlang", n = 3200)
head(tweets)
tweets <- searchTwitteR("#rstats", n = 3200)
tweets <- twListToDF(tweets)
View(tweets)
tweets <- subset(tweets, isRetweet == FALSE)
?sort
library(dplyr)
tweets <- arrange(tweets, desc(retweetCount))
headtweets
head(tweets)
tweets <- searchTwitteR("#rstats", n = 3200, includeRts = FALSE)
tweets[20,]
tweets[1:20,]
plot(tweets$created, tweets$retweetCount)
tweets_grouped <- tweets %>% group_by(screenName) %>% summarize(count = n, RT_sum = sum(retweetCount))
tweets_grouped <- tweets %>% group_by(screenName) %>% summarize(count = n(), RT_sum = sum(retweetCount))
library(ggplot2)
ggplot(tweets_grouped, aes(count, RT_sum))+
geom_point()
ggplot(tweets_grouped[-1,], aes(count, RT_sum))+
geom_point()
ggplot(tweets_grouped[tweets_grouped$RT_sum < 1000,], aes(count, RT_sum))+
geom_point()
x <- runif(1000000)
y <- runif(1000000)
system.time(x+y)
system.time(x+y)
system.time(x+y)
system.time(x+y)
system.time(x+y)
system.time(x+y)
system.time(x+y)
pairs(mtcars)
install.packages("pryr")
install.packages("pryr", repos = "http://cran.mirror.garr.it/mirrors/CRAN/")
install.packages("pryr", repos = "https://cran.cnr.Berkeley.edu/")
library(pryr)
views <- seq(100000, 2e7, 5e4)
cpv_finder <- function(views, scaglioni, cpv_values) {
for (i in 1:length(scaglioni)) {
temp <- views[views < scaglioni[i]]
cpv_unit <- (cpv_values[i] - cpv_values[i+1])/length(temp)
for (n in 1:length(temp)) {
if (n == 1) {
cpv_final[i] <- cpv_values[i]
} else {
cpv_final[i] <- cpv_values[i-1] - cpv_unit
}
return(cpv_final)
}
}
}
cpv_finder(views, c(1e5, 2e5, 4e5), c(0.3, 0.2, 0.1))
cpv_finder <- function(views, scaglioni, cpv_values) {
for (i in 1:length(scaglioni)) {
temp <- views[views < scaglioni[i]]
cpv_unit <- (cpv_values[i] - cpv_values[i+1])/length(temp)
for (n in 1:length(temp)) {
cpv_final <- vector("numerical", length(temp))
if (n == 1) {
cpv_final[n] <- cpv_values[n]
} else {
cpv_final[n] <- cpv_values[n-1] - cpv_unit
}
return(cpv_final)
}
}
}
cpv_finder(views, c(1e5, 2e5, 4e5), c(0.3, 0.2, 0.1))
cpv_finder <- function(views, scaglioni, cpv_values) {
for (i in 1:length(scaglioni)) {
temp <- views[views < scaglioni[i]]
cpv_unit <- (cpv_values[i] - cpv_values[i+1])/length(temp)
for (n in 1:length(temp)) {
cpv_final <- vector("numeric", length(temp))
if (n == 1) {
cpv_final[n] <- cpv_values[n]
} else {
cpv_final[n] <- cpv_values[n-1] - cpv_unit
}
return(cpv_final)
}
}
}
cpv_finder(views, c(1e5, 2e5, 4e5), c(0.3, 0.2, 0.1))
cpv_finder <- function(views, scaglioni, cpv_values) {
for (i in 1:length(scaglioni)) {
temp <- views[views < scaglioni[i]]
cpv_unit <- (cpv_values[i] - cpv_values[i+1])/length(temp)
for (n in 1:length(temp)) {
cpv_final <- vector("numeric", length(temp))
if (n == 1) {
cpv_final[n] <- cpv_values[n]
} else {
cpv_final[n] <- cpv_values[n-1] - cpv_unit
}
}
}
return(cpv_final)
}
cpv_finder(views, c(1e5, 2e5, 4e5), c(0.3, 0.2, 0.1))
cut(views, length(scaglioni))
?cut
cut(views, c(1e5, 2e5, 4e5), labels = FALSE)
cut(views, c(1e5, 2e5, 4e5), labels = FALSE, include.lowest = TRUE, dig.lab = 3)
cpv <- c(.3, .28, .27, .26, .25, .24, .23, .22, .21, .2)
cpv <- c(.3, .28, .27, .26, .25, .24, .23, .22, .2)
scaglioni <- c(1e5, 2e5, 5e5, 1e6, 2e6, 3e6, 5e6, 10e6, 20e6)
views <- seq(100000, 2e7, 1)
cut(views, scaglioni, labels = FALSE)
test <- cut(views, scaglioni, labels = FALSE, include.lowest = T)
sum(is.na(test))
cpv_final <- vector("numeric", length(views))
rm(test)
if(1 < scaglioni)
TRUE
cpv_final[1:length(views[views < scaglioni[2]])] <- (cpv[1]-cpv[2])/length(views[views < scaglioni[2]])
head(cpv_final)
cpv_final[1] <- cpv[1]
head(cpv_final)
scaglioni[10]
for (i in 1:length()) {
cpv_final[1] <- cpv[1]
cpv_final[2:length(views[views < scaglioni[i+1]])] <- (cpv[i]-cpv[i+1])/length(views[views < scaglioni[i+1]])
}
for (i in 1:length(views)) {
cpv_final[1] <- cpv[1]
cpv_final[i] <- (cpv[i]-cpv[i+1])/length(views[views < scaglioni[i+1]])
}
views <- seq(100000, 2e7, 50000)
rm(cpv_final)
cpv_final <- c()
for (i in 1:length(views)) {
cpv_final[1] <- cpv[1]
cpv_final[i] <- (cpv[i]-cpv[i+1])/length(views[views < scaglioni[i+1]])
}
for (i in 1:length(views)) {
cpv_final[1] <- cpv[1]
cpv_final[i] <- cpv_final[i-1]-(cpv[i]-cpv[i+1])/length(views[views < scaglioni[i+1]])
}
for (i in 2:length(views)) {
cpv_final[1] <- cpv[1]
cpv_final[i] <- cpv_final[i-1]-(cpv[i]-cpv[i+1])/length(views[views < scaglioni[i+1]])
}
cpv_final
cpv_final[1] <- cpv[1]
for (i in 2:length(views)) {
for (n in 1:length(scaglioni)) {
cpv_final[i] <- cpv_final[i-1]-(cpv[n]-cpv[n+1])/length(views[views < scaglioni[n+1]])
}
}
views <- seq(100000, 2e7, 10000)
views <- seq(100000, 2e7, 1000)
cpv <- c(.3, .28, .27, .26, .25, .24, .23, .22, .2)
scaglioni <- c(1e5, 2e5, 5e5, 1e6, 2e6, 3e6, 5e6, 10e6, 20e6)
cpv_final_1 <- seq(.3, .2, length(scaglioni[2]-scaglioni[1]))
scaglioni[2]-scaglioni[1]
cpv_final_1 <- rev(seq(.2, .3 length(scaglioni[2]-scaglioni[1])))
cpv_final_1 <- rev(seq(.2, .3, length(scaglioni[2]-scaglioni[1])))
cpv_final_1 <- rev(seq(.2, .3, (cpv[1]-cpv[2])/length(scaglioni[2]-scaglioni[1])))
cpv_final_1 <- seq(.2, .3, (cpv[1]-cpv[2])/length(scaglioni[2]-scaglioni[1]))
cpv_final_1 <- seq(.3,.2 (cpv[1]-cpv[2])/length(scaglioni[2]-scaglioni[1]))
cpv_final_1 <- seq(.3,.2, (cpv[1]-cpv[2])/length(scaglioni[2]-scaglioni[1]))
for (i in 2:length(scaglioni)) {
temp <-  rev(seq(.2, .3, (cpv[i-1]-cpv[i])/length(scaglioni[i]-scaglioni[i-1])))
print(temp)
}
for (i in 2:length(scaglioni)) {
temp <-  rev(seq(scaglioni[i], scaglioni[i-1], (cpv[i-1]-cpv[i])/length(scaglioni[i]-scaglioni[i-1])))
print(temp)
}
for (i in 2:length(scaglioni)) {
temp <-  rev(seq(cpv[i], cpv[i-1], (cpv[i-1]-cpv[i])/length(scaglioni[i]-scaglioni[i-1])))
print(temp)
}
cpv[1]-cpv[2])/length(scaglioni[2]-scaglioni[1])
(cpv[1]-cpv[2])/length(scaglioni[2]-scaglioni[1])
views <- seq(1e5, 2e5, 1000)
length(views)/(cpv[1]-cpv[2])
(cpv[1]-cpv[2])/length(views)
make_views <- function(scaglioni, by) {
df <- data.frame()
for (i in 1:length(scaglioni)-1) {
views <- c(views, seq(scaglioni[i], scaglioni[i+1], by))
}
}
views <- make_views(scaglioni, 1000)
scaglioni[i]
scaglioni[1]
seq(scaglioni[1], scaglioni[1+1], 100000)
seq(scaglioni[1], scaglioni[1+1], 10000)
scaglioni <- c(1e5, 2e5, 5e5, 1e6, 2e6, 3e6, 5e6, 10e6, 20e6)
views <- make_views(scaglioni, 1000)
make_views <- function(scaglioni, by) {
for (i in 1:(length(scaglioni)-1)) {
views <- c(views, seq(scaglioni[i], scaglioni[i+1], by))
}
return(views)
}
views <- make_views(scaglioni, 1000)
tail(views)
scaglioni[2]-scaglioni[1]
(cpv[2]-cpv[1])/scaglioni[2]-scaglioni[1]
make_cpv <- function(cpv) {
for (i in 1:length(cpv)-1) {
cpv <- c(cpv,
rev(
seq(
cpv[i+1],
cpv[i],
(cpv[i+1]-cpv[i])/scaglioni[i+1]-scaglioni[i]
)
)
)
}
return(cpv)
}
cpv_final <- make_cpv(cpv)
make_cpv <- function(cpv) {
for (i in 1:(length(cpv)-1)) {
cpv <- c(cpv,
rev(
seq(
cpv[i+1],
cpv[i],
(cpv[i+1]-cpv[i])/scaglioni[i+1]-scaglioni[i]
)
)
)
}
return(cpv)
}
cpv_final <- make_cpv(cpv)
make_cpv <- function(cpv) {
for (i in 1:(length(cpv)-1)) {
cpv <- c(cpv,
rev(
seq(
cpv[i],
cpv[i+1],
(cpv[i+1]-cpv[i])/scaglioni[i+1]-scaglioni[i]
)
)
)
}
return(cpv)
}
cpv_final <- make_cpv(cpv)
titanic <- read.csv(
"https://raw.githubusercontent.com/alanmarazzi/trees-forest/master/data/train.csv",
stringsAsFactors = FALSE,
na.strings = "")
names(titanic) <- tolower(names(titanic))
titanic$sex <- as.factor(titanic$sex)
titanic$embarked <- as.factor(titanic$embarked)
mean(is.na(titanic$age))
age_prediction <- lm(age ~ survived + pclass + fare, data = titanic)
summary(age_prediction)
titanic$age[is.na(titanic$age)] <- predict(age_prediction,
newdata = titanic[is.na(titanic$age),])
sum(is.na(titanic$age))
library(dplyr)
library(intubate)
install.packages("intubate")
library(intubate)
logi <- titanic %>%
select(survived, pclass, sex, age, sibsp) %>%
ntbt_glm(survived ~ ., family = binomial)
install.packages("updateR")
install.packages("update")
install.packages("updater")
install.packages("installr")
installr::updateR(copy_packages = TRUE, update_packages = TRUE)
(480+250)/891
sqrt_newton <- function(a, init, eps = .01) {
if (abs(init ** 2 - a) < eps) {
result <- init
} else {
init <- 1/2 * (init + a/init)
result <- sqrt_newton(a, init, eps)
}
return(result)
}
sqrt_newton(9)
sqrt_newton(16, 2)
sqrt_newton(9, 2)
sqrt_newton(9, 2, .0000001)
sqrt_newton(500, 2, .0000001)
sqrt_newton(100000, 2, .0000001)
sqrt_newton(100000, 2, .0000000001)
sqrt_newton(100000, 8, .0000000001)
sqrt_newton(100000, 4, .0000000001)
sqrt_newton(100000, 10000, .0000000001)
sqrt_newton(100000, 1, .0000000001)
sqrt_newton(1000000000, 1, .0000000001)
sqrt_newton(10000000, 1, .0000000001)
sqrt_newton(10000000, 1, .000001)
is.atomic(list(1:5))
class(c(1:5))
class(c("a"))
titanic <- read.csv(
"https://raw.githubusercontent.com/alanmarazzi/trees-forest/master/data/train.csv",
stringsAsFactors = FALSE,
na.strings = "")
names(titanic) <- tolower(names(titanic))
titanic$sex <- as.factor(titanic$sex)
titanic$embarked <- as.factor(titanic$embarked)
age_prediction <- lm(age ~ survived + pclass + fare, data = titanic)
titanic$age[is.na(titanic$age)] <- predict(age_prediction,
newdata = titanic[is.na(titanic$age),])
sum(is.na(titanic$age))
library(dplyr)
library(intubate)
logi <- titanic %>%
select(survived, pclass, sex, age, sibsp) %>%
ntbt_glm(survived ~ ., family = binomial)
logi_pred <- predict(logi, type = "response")
survivors_logi <- rep(0, nrow(titanic))
survivors_logi[logi_pred > .5] <- 1
table(model = survivors_logi, real = titanic$survived)
test <- read.csv("https://raw.githubusercontent.com/alanmarazzi/trees-forest/master/data/test.csv",
stringsAsFactors = FALSE,
na.strings = "")
names(test) <- tolower(names(test))
test$sex <- as.factor(test$sex)
test_logi_pred <- predict(logi, test, type = "response")
surv_test_logi <- data.frame(PassengerId = test$passengerid,
Survived = rep(0, nrow(test)))
surv_test_logi$Survived[test_logi_pred > .5] <- 1
table(surv_test_logi$Survived)
library(party)
partyTitanic <- titanic %>%
select(age, pclass, sex, sibsp, fare, survived) %>%
ntbt(ctree, as.factor(survived) ~ .)
plot(partyTitanic)
train_party <- Predict(partyTitanic)
table(tree = train_party, real = titanic$survived)
party_pred <- Predict(partyTitanic, newdata = test)
party_pred <- as.numeric(party_pred) - 1
party_pred <- data.frame(PassengerId = test$passengerid, Survived = party_pred)
install.packages("modelr")
library(modelr)
titanic_k <- crossv_kfold(titanic, 10)
head(titanic_k)
library(purrr)
titanic_k <- titanic %>%
select(age, pclass, sex, sibsp, fare, survived) %>%
crossv_kfold(titanic, 10)
titanic_k <- titanic %>%
select(age, pclass, sex, sibsp, fare, survived) %>%
crossv_kfold(10)
party_cv <- map(titanic_k$train, ~ ctree(as.factor(survived) ~ ., data = .))
errs <- map2_dbl(party_cv, titanic_k$test, rmse)
titanic_k$train
party_cv$`1`
errs <- map2_dbl(party_cv, titanic_k$test, table)
predict(party_cv)
predict(party_cv$`1`)
errs <- map_dbl(party_cv, titanic_k$test, predict)
errs <- predict(party_cv$`1`, newdata = titanic_k$test)
res_party_cv <- titanic_k %>%
add_predictions(party_cv)
errs <- map2(party_cv, titanic_k$test, rmse)
rmse
errs <- map2(party_cv, titanic_k$test, table)
titanic_k$test
party_cv_test <- map(titanic_k$test, ~ ctree(as.factor(survived) ~ ., data = .))
party_cv_test$`1`
?ctree
party_feat <- titanic %>%
select(age, pclass, sex, sibsp, fare, survived) %>%
ntbt(ctree, as.factor(survived)~., ctree_control(testtype = "Univariate", maxdepth = 3))
party_feat <- titanic %>%
select(age, pclass, sex, sibsp, fare, survived) %>%
ntbt(ctree, as.factor(survived)~., ctree_control(maxdepth = 3))
partyTitanic <- titanic %>%
select(age, pclass, sex, sibsp, fare, survived) %>%
ntbt(ctree, as.factor(survived) ~ .)
party_feat <- titanic %>%
select(age, pclass, sex, sibsp, fare, survived) %>%
ntbt(ctree, as.factor(survived)~., ctree_control(maxdepth = 4))
titanic_appoggio <- titanic %>%
select(age, pclass, sex, sibsp, fare, survived)
party_feat <- ctree(as.factor(survived ~., data = titanic_appoggio, ctree_control(maxdepth = 3)))
?ctree
party_feat <- ctree(as.factor(survived) ~., data = titanic_appoggio, ctree_control(maxdepth = 3))
matrix(rep(10, 10))
matrix(rep(10, 100))
matrix(rep(10, 10)*2)
matrix(rep(10, 10)*2, nrow = 5)
matrix(rep(10, 100), nrow = 5)
matrix(rep(10, 20), nrow = 5)
matrix(rep(10, 30), nrow = 5)
matrix(rep(10, 25), nrow = 5)
matrix(rep(10, 25), nrow = 5)*c(rep(5))
matrix(rep(10, 25), nrow = 5)%*%c(rep(5))
matrix(rep(10, 25), nrow = 5)%*%matrix(rep(5))
titanic <- read.csv(
"https://raw.githubusercontent.com/alanmarazzi/trees-forest/master/data/train.csv",
stringsAsFactors = FALSE,
na.strings = "")
names(titanic) <- tolower(names(titanic))
titanic$sex <- as.factor(titanic$sex)
titanic$embarked <- as.factor(titanic$embarked)
age_prediction <- lm(age ~ survived + pclass + fare, data = titanic)
summary(age_prediction)
titanic$age[is.na(titanic$age)] <- predict(age_prediction,
newdata = titanic[is.na(titanic$age),])
library(dplyr)
library(intubate)
logi <- titanic %>%
select(survived, pclass, sex, age, sibsp) %>%
ntbt_glm(survived ~ ., family = binomial)
logi_pred <- predict(logi, type = "response")
survivors_logi <- rep(0, nrow(titanic))
survivors_logi[logi_pred > .5] <- 1
table(model = survivors_logi, real = titanic$survived)
test <- read.csv("https://raw.githubusercontent.com/alanmarazzi/trees-forest/master/data/test.csv",
stringsAsFactors = FALSE,
na.strings = "")
names(test) <- tolower(names(test))
test$sex <- as.factor(test$sex)
test_logi_pred <- predict(logi, test, type = "response")
surv_test_logi <- data.frame(PassengerId = test$passengerid,
Survived = rep(0, nrow(test)))
surv_test_logi$Survived[test_logi_pred > .5] <- 1
table(surv_test_logi$Survived)
library(party)
partyTitanic <- titanic %>%
select(age, pclass, sex, sibsp, fare, survived) %>%
ntbt(ctree, as.factor(survived) ~ .)
plot(partyTitanic)
getwd()
setwd()
setwd("D:/alanm/archivio R/trees-forest")
setwd("D:/alanm/Archivio R/rDisorder/trees-forest")
setwd("D:/alanm/Archivio R/rDisorder/trees&forest")
png("party_tree.png", u = "in", w = 10, h = 8, res = 800)
plot(partyTitanic)
dev.off()
png("party_tree.png", u = "in", w = 10, h = 8, res = 900)
plot(partyTitanic, main = "Titanic prediction", type = "simple",
inner_panel = node_inner(partyTitanic,
pval = FALSE),
terminal_panel = node_terminal(partyTitanic,
abbreviate = TRUE,
digits = 1,
fill = "white"))
dev.off()
